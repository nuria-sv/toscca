xx=x%*%t(x) # nxn
xx2=msqrt(xx)
y=t(z)%*%xx2 # qxn
a=try(svd(y), silent=TRUE)
iter <- 1
if(class(a)=="try-error" && iter<10){
a=try(svd(y), silent=TRUE)
iter <- iter+1
}
if(iter==10) stop("too many tries.")
v=a$u
d=a$d
zz=z%*%t(z)
zz2=msqrt(zz)
y=t(x)%*%zz2
a=try(svd(y), silent=TRUE)
iter <- 1
if(class(a)=="try-error" && iter<10){
a=try(svd(y), silent=TRUE)
iter <- iter+1
}
if(iter==10) stop("too many tries.")
u=a$u
return(list(u=u,v=v,d=d))
}
msqrt <- function(x){
eigenx <- eigen(x)
return(eigenx$vectors%*%diag(sqrt(pmax(0,eigenx$values)))%*%t(eigenx$vectors))
}
# thresholding ------------------------------------------------------------
soft <- function(x,d){
return(sign(x)*pmax(0, abs(x)-d))
}
mean.na <- function(vec){
return(mean(vec[!is.na(vec)]))
}
l2n <- function(vec){
a <- sqrt(sum(vec^2))
if(a==0) a <- .05
return(a)
}
safesvd <- function(x){
i <- 1
out <- try(svd(x), silent=TRUE)
while(i<10 && class(out)=="try-error"){
out <- try(svd(x), silent=TRUE)
i <- i+1
}
if(class(out)=="try-error") out <- svd(matrix(rnorm(nrow(x)*ncol(x)), ncol=ncol(x)))
return(out)
}
BinarySearch <- function(argu,sumabs){
if(l2n(argu)==0 || sum(abs(argu/l2n(argu)))<=sumabs) return(0)
lam1 <- 0
lam2 <- max(abs(argu))-1e-5
iter <- 1
while(iter < 150){
su <- soft(argu,(lam1+lam2)/2)
if(sum(abs(su/l2n(su)))<sumabs){ # sumabs is penalty sqrt dim
lam2 <- (lam1+lam2)/2
} else {
lam1 <- (lam1+lam2)/2
}
if((lam2-lam1)<1e-6) return((lam1+lam2)/2)
iter <- iter+1
}
warning("Didn't quite converge")
return((lam1+lam2)/2)
}
SMD <- function(x, sumabsu, sumabsv, niter=20,trace=TRUE, v, upos, uneg, vpos, vneg){
# This gets a single factor. Do MultiSMD to get multiple factors.
nas <- is.na(x)
v.init <- v
xoo <- x
if(sum(nas)>0) xoo[nas] <- mean(x[!nas])
oldv <- rnorm(ncol(x))
for(iter in 1:niter){
if(sum(abs(oldv-v))>1e-7){
oldv <- v
if(trace) cat(iter,fill=F)
# update u #
argu <- xoo%*%v
if(upos) argu <- pmax(argu,0)
if(uneg) argu <- pmin(argu,0)
lamu <- BinarySearch(argu,sumabsu)
su <- soft(argu,lamu)
u <- matrix(su/l2n(su),ncol=1)
# done updating u #
# update v #
argv <- t(u)%*%xoo
if(vpos) argv <- pmax(argv,0)
if(vneg) argv <- pmin(argv,0)
lamv <- BinarySearch(argv, sumabsv)
sv <- soft(argv,lamv)
v <- matrix(sv/l2n(sv),ncol=1)
# done updating v #
}
}
d <- as.numeric(t(u)%*%(xoo%*%v))
if(trace) cat(fill=TRUE)
return(list(d=d, u=u, v=v, v.init=v.init))
}
SMDOrth <- function(x, us, sumabsv=NULL, niter=20, trace=TRUE,v, vpos, vneg){
# Gets the next u for sparse PCA, using Trevor's method of requiring this new u to be orthog
# to all previous us (contained in us)
nas <- is.na(x)
v.init <- v
xoo <- x
if(sum(nas)>0) xoo[nas] <- mean(x[!nas])
u <- rnorm(nrow(x))
oldu <- rnorm(nrow(x))
oldv <- rnorm(ncol(x))
for(iter in 1:niter){
if(sum(abs(oldu-u))>1e-6 || sum(abs(oldv-v))>1e-6){
oldu <- u
oldv <- v
if(trace) cat(iter,fill=F)
# update u #
argu <- xoo%*%v
numer <- lsfit(y=argu, x=us, intercept=FALSE)$res
u <- numer/l2n(numer)
# done updating u #
# update v #
argv <- t(u)%*%xoo
if(vpos) argv <- pmax(argv,0)
if(vneg) argv <- pmin(argv,0)
lamv <- BinarySearch(argv, sumabsv)
sv <- soft(argv,lamv)
v <- matrix(sv/l2n(sv),ncol=1)
# done updating v #
}
}
d <- as.numeric(t(u)%*%(xoo%*%v))
if(trace) cat(fill=TRUE)
return(list(d=d,u=u,v=v, v.init=v.init))
}
CheckPMDV <-  function(v,x,K){
if(!is.null(v) && is.matrix(v) && ncol(v)>=K){
v <- matrix(v[,1:K], ncol=K)
} else if(ncol(x)>nrow(x)){
x[is.na(x)] <- mean.na(x)
v <- matrix(t(x)%*%(safesvd(x%*%t(x))$v[,1:K]),ncol=K)
if(sum(is.na(v))>0) v <- matrix(safesvd(x)$v[,1:K], ncol=K)
v <- sweep(v,2,apply(v, 2, l2n), "/")
if(sum(is.na(v))>0) stop("some are NA")
} else if (ncol(x)<=nrow(x)){
x[is.na(x)] <- mean.na(x)
v <- matrix(safesvd(t(x)%*%x)$v[,1:K],ncol=K)
}
return(v)
}
pma_lambda = PMA::CCA.permute(X, Y, typex = "standard", typez = "standard")
cca_pma = CCA_pma_random(X, Y, K = 4, typex = "standard", typez = "standard", start = "uniform",
penaltyx = pma_lambda$bestpenaltyx, pma_lambda$bestpenaltyz)
aa= matrix(0, p, K)
aa[loc_alpha1, 1] <- alpha1; aa[loc_alpha2, 2] <- alpha2; aa[loc_alpha3, 3] <- alpha3
bb= matrix(0, q, K)
bb[loc_beta1, 1] <- beta1; bb[loc_beta2, 2] <- beta2; bb[loc_beta3, 3] <- beta3
margin = 0.05
ylima1 = c(min(aa[,1]) - margin, max(aa[,1]) + margin)
ylima2 = c(min(aa[,2]) - margin, max(aa[,2]) + margin)
ylimb1 = c(min(bb[,1]) - margin, max(bb[,1]) + margin)
ylimb2 = c(min(bb[,2]) - margin, max(bb[,2]) + margin)
par(mfrow=c(3,4), mar=c(4., 4.5, 3, 0.5)) # mar (bottom, left, top, right)
plot(aa[,1], pch = 15, ylim = ylima1, main = expression(alpha[1]), cex.main = 1.5, ylab = "True", xlab = "")
plot(aa[,2], pch = 15, ylim = ylima2, main = expression(alpha[2]), cex.main = 1.5, ylab = "", xlab = "")
plot(bb[,1], pch = 15, ylim = ylimb1, main = expression(beta[1]), cex.main = 1.5, ylab = "", xlab = "")
plot(bb[,2], pch = 15, ylim = ylimb2, main = expression(beta[2]), cex.main = 1.5, ylab = "", xlab = "")
plot(cca_toscca$alpha[,2], pch = 15, ylim = ylima1, ylab = "TOSCCA", xlab = "")
plot(cca_toscca$alpha[,1], pch = 15, ylim = ylima2, ylab = "", xlab = "")
plot(cca_toscca$beta[,2], pch = 15, ylim = ylimb1, ylab = "", xlab = "")
plot(cca_toscca$beta[,1], pch = 15, ylim = ylimb2, ylab = "", xlab = "")
plot(cca_pma$v[,2], pch = 15, ylim = ylima1, ylab = "PMA", xlab = "p")
plot(cca_pma$v[,1], pch = 15, ylim = ylima2, ylab = "", xlab = "p")
plot(cca_pma$u[,2], pch = 15, ylim = ylimb1, ylab = "", xlab = "q")
plot(cca_pma$u[,1], pch = 15, ylim = ylimb2, ylab = "", xlab = "q")
nonz_x = seq(10, 400, 50)
nonz_y = seq(10, 400, 50)
alpha = matrix(NA, nrow = ncol(X), ncol = length(nonz_x))
beta = matrix(NA, nrow = ncol(Y), ncol = length(nonz_y))
cancor = rep(NA, 10)
for (i in 1:length(nonz_x)) {
cca_res =  toscca::toscca(X, Y, K = 2, nonzero_a = rep(nonz_x[i],2), nonzero_b = c(50,nonz_y), combination = FALSE, toPlot = FALSE, alpha_init = "uniform")
alpha[,i] =cca_res$alpha[,1]
beta[,i] = cca_res$beta[,1]
cancor[i] = cca_res$cancor[1]
}
par(mfrow=c(1,1),mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
matplot(alpha, type = "l"); legend("topright", as.character(nonz_x),col=seq_len(K),cex=0.8,fill=seq_len(10), inset=c(-0.081,0), title = "nonzero")
matplot(beta, type = "l"); legend("topright", as.character(nonz_x),col=seq_len(K),cex=0.8,fill=seq_len(10), inset=c(-0.081,0), title = "nonzero")
numToBi = function(data) {
r = nrow(data)
c = ncol(data)
logicalMatrix = matrix(data != 0, nrow = r, ncol = c)
binaryMatrix  = matrix(as.numeric(logicalMatrix), nrow = r, ncol = c)
binaryMatrix
}
count_alpha_df = numToBi(alpha[,1:(ncol(alpha))])
colnames(count_alpha_df) <- as.character(nonz_x)
count_alpha_df = data.frame(count_alpha_df, count = rowSums(count_alpha_df))
col_a=rep(NA, nrow(alpha))
for(i in 1:8) {
col_a[which(count_alpha_df$count==i)]<- RColorBrewer::brewer.pal(n = 8, name = "Purples")[i]
}
plot(alpha[,ncol(alpha)], pch = 19, col = col_a, xlab = "p", ylab = "coefficients")
legend("topright", as.character(1:length(nonz_x)),col=col_a,cex=0.8,fill= brewer.pal(n = length(nonz_x), name = "Purples"), inset=c(-0.33,0), title = expression(atop(" Variable selection  ", " count for different p"[alpha])))
col_a[is.na(col_a)] = 1
cpev_pma = sapply(1:K, function(k) cpev.fun(X, X%*%cca_pma$u[,1:k]))
auto_cor = data.frame(first_second = c(cor(cca_pma$u[,1] , cca_pma$u[,2]),
cor(cca_toscca$alpha[,1], cca_toscca$alpha[,2])),
first_third  = c(cor(cca_pma$u[,1] , cca_pma$u[,3]),
cor(cca_toscca$alpha[,1], cca_toscca$alpha[,3])),
first_fourth = c(cor(cca_pma$u[,1] , cca_pma$u[,4]),
cor(cca_toscca$alpha[,1], cca_toscca$alpha[,4])),
second_third = c(cor(cca_pma$u[,2] , cca_pma$u[,3]),
cor(cca_toscca$alpha[,2], cca_toscca$alpha[,3])),
third_fourth = c(cor(cca_pma$u[,3] , cca_pma$u[,4]),
cor(cca_toscca$alpha[,3], cca_toscca$alpha[,4]))
)
rownames(auto_cor) <- c("PMA", "TOSCCA")
adj_cpev_toscca = c(cpev_toscca[1],
sapply(2:K, function(k) cpev_toscca[k]*prod(1-abs(auto_cor[2,k-1:k]))))
adj_cpev_pma    = c(cpev_pma[1],
sapply(2:K, function(k) cpev_pma[k]*prod(1-abs(auto_cor[1,k-1:k]))))
plot(t(auto_cor[2,]), type = "b", pch = 19, col = "deepskyblue", xlab = "Correlation to first component", ylab = "Autocorrelation", xaxt = "n", yaxt="n", ylim = c(-1,1), lty = 1)
axis(1, at=1:length(colnames(auto_cor)), lab=colnames(auto_cor), las=TRUE)
axis(2, at=pretty(c(-1,1)), lab=pretty(c(-1,1)), las=TRUE)
grid(nx = NULL, ny = NULL, lty = 2, col = alpha("lightgray", 0.4),lwd = 2)
points(t(auto_cor[1,]), type = "b", pch = 15, col = "tomato", lty = 2)
plot((adj_cpev_toscca), type = "b", pch = 19, col = "deepskyblue", xlab = "Component", ylab = "Adjusted CPEV", xaxt = "n", yaxt="n", ylim = c(0,max(max(adj_cpev_pma), max(adj_cpev_toscca))), lty = 1)
axis(1, at=1:K, lab=1:K, las=TRUE)
axis(2, at=pretty(c(0,max(max(adj_cpev_pma), max(adj_cpev_toscca)))), lab=pretty(c(0,max(max(adj_cpev_pma), max(adj_cpev_toscca)))), las=TRUE)
grid(nx = NULL, ny = NULL, lty = 2, col = alpha("lightgray", 0.4),lwd = 2)
points((adj_cpev_pma), type = "b", pch = 15, col = "tomato", lty = 2)
kable(
auto_cor,
col.names = colnames(auto_cor),
# row.names = row.names(auto_cor),
# digits = 2,
caption = "Autocorrelation between components"
)
adj_cpev = rbind(adj_cpev_pma, adj_cpev_toscca)
rownames(adj_cpev) <- c("PMA", "TOSCCA")
colnames(adj_cpev) <- paste0("K", 1:K)
kable(
adj_cpev,
col.names = colnames(adj_cpev_pma),
# row.names = row.names(auto_cor),
# digits = 2,
caption = "Autocorrelation between components"
)
plot(cca_toscca$alpha[,1])
plot(cca_toscca$beta[,1])
plot(cca_toscca$beta[,2])
loc_alpha1
loc_alpha2
which(cca_toscca$alpha[,1]!=0)
table(intersect(which(cca_toscca$alpha[,1]!=0)), loc_alpha2)
table(intersect(which(cca_toscca$alpha[,1]!=0), loc_alpha2))
(intersect(which(cca_toscca$alpha[,1]!=0), loc_alpha2))
table((which(cca_toscca$alpha[,1]!=0) %in% loc_alpha2))
table((which(cca_toscca$alpha[,1]!=0) %in% loc_alpha3))
table((which(cca_toscca$alpha[,1]!=0) %in% loc_alpha1))
length(loc_alpha3)
table(intersect(which(cca_toscca$alpha[,2]!=0), loc_alpha2))
table((which(cca_toscca$alpha[,2]!=0) %in% loc_alpha2))
aa= matrix(0, p, K)
aa[loc_alpha1, 1] <- alpha1; aa[loc_alpha2, 2] <- alpha2; aa[loc_alpha2, 3] <- alpha2
bb= matrix(0, q, K)
bb[loc_beta1, 1] <- beta1; bb[loc_beta2, 2] <- beta2; bb[loc_beta3, 3] <- beta3
margin = 0.05
ylima1 = c(min(aa[,1]) - margin, max(aa[,1]) + margin)
ylima2 = c(min(aa[,2]) - margin, max(aa[,2]) + margin)
ylimb1 = c(min(bb[,1]) - margin, max(bb[,1]) + margin)
ylimb2 = c(min(bb[,2]) - margin, max(bb[,2]) + margin)
par(mfrow=c(3,4), mar=c(4., 4.5, 3, 0.5)) # mar (bottom, left, top, right)
plot(aa[,1], pch = 15, ylim = ylima1, main = expression(alpha[1]), cex.main = 1.5, ylab = "True", xlab = "")
plot(aa[,2], pch = 15, ylim = ylima2, main = expression(alpha[2]), cex.main = 1.5, ylab = "", xlab = "")
plot(bb[,1], pch = 15, ylim = ylimb1, main = expression(beta[1]), cex.main = 1.5, ylab = "", xlab = "")
plot(bb[,2], pch = 15, ylim = ylimb2, main = expression(beta[2]), cex.main = 1.5, ylab = "", xlab = "")
plot(cca_toscca$alpha[,2], pch = 15, ylim = ylima1, ylab = "TOSCCA", xlab = "")
plot(cca_toscca$alpha[,1], pch = 15, ylim = ylima2, ylab = "", xlab = "")
plot(cca_toscca$beta[,2], pch = 15, ylim = ylimb1, ylab = "", xlab = "")
plot(cca_toscca$beta[,1], pch = 15, ylim = ylimb2, ylab = "", xlab = "")
plot(cca_pma$v[,2], pch = 15, ylim = ylima1, ylab = "PMA", xlab = "p")
plot(cca_pma$v[,1], pch = 15, ylim = ylima2, ylab = "", xlab = "p")
plot(cca_pma$u[,2], pch = 15, ylim = ylimb1, ylab = "", xlab = "q")
plot(cca_pma$u[,1], pch = 15, ylim = ylimb2, ylab = "", xlab = "q")
aa= matrix(0, p, K)
aa[loc_alpha1, 1] <- alpha1; aa[loc_alpha2, 2] <- alpha2; aa[loc_alpha3, 3] <- alpha3
bb= matrix(0, q, K)
bb[loc_beta1, 1] <- beta1; bb[loc_beta2, 2] <- beta2; bb[loc_beta3, 3] <- beta3
margin = 0.05
ylima1 = c(min(aa[,1]) - margin, max(aa[,1]) + margin)
ylima2 = c(min(aa[,2]) - margin, max(aa[,2]) + margin)
ylimb1 = c(min(bb[,1]) - margin, max(bb[,1]) + margin)
ylimb2 = c(min(bb[,2]) - margin, max(bb[,2]) + margin)
par(mfrow=c(3,4), mar=c(4., 4.5, 3, 0.5)) # mar (bottom, left, top, right)
plot(aa[,1], pch = 15, ylim = ylima1, main = expression(alpha[1]), cex.main = 1.5, ylab = "True", xlab = "")
plot(aa[,1], pch = 15, ylim = ylima1, main = expression(alpha[1]), cex.main = 1.5, ylab = "True", xlab = "")
plot(aa[,2], pch = 15, ylim = ylima2, main = expression(alpha[2]), cex.main = 1.5, ylab = "", xlab = "")
plot(bb[,1], pch = 15, ylim = ylimb1, main = expression(beta[1]), cex.main = 1.5, ylab = "", xlab = "")
plot(bb[,2], pch = 15, ylim = ylimb2, main = expression(beta[2]), cex.main = 1.5, ylab = "", xlab = "")
plot(cca_toscca$alpha[,2], pch = 15, ylim = ylima1, ylab = "TOSCCA", xlab = "")
plot(cca_toscca$alpha[,3], pch = 15, ylim = ylima2, ylab = "", xlab = "")
plot(cca_toscca$beta[,2], pch = 15, ylim = ylimb1, ylab = "", xlab = "")
plot(cca_toscca$beta[,3], pch = 15, ylim = ylimb2, ylab = "", xlab = "")
plot(cca_pma$v[,2], pch = 15, ylim = ylima1, ylab = "PMA", xlab = "p")
plot(cca_pma$v[,1], pch = 15, ylim = ylima2, ylab = "", xlab = "p")
aa= matrix(0, p, K)
aa[loc_alpha1, 1] <- alpha1; aa[loc_alpha2, 2] <- alpha2; aa[loc_alpha3, 3] <- alpha3
bb= matrix(0, q, K)
bb[loc_beta1, 1] <- beta1; bb[loc_beta2, 2] <- beta2; bb[loc_beta3, 3] <- beta3
margin = 0.05
ylima1 = c(min(aa[,1]) - margin, max(aa[,1]) + margin)
ylima2 = c(min(aa[,2]) - margin, max(aa[,2]) + margin)
ylimb1 = c(min(bb[,1]) - margin, max(bb[,1]) + margin)
ylimb2 = c(min(bb[,2]) - margin, max(bb[,2]) + margin)
par(mfrow=c(3,4), mar=c(4., 4.5, 3, 0.5)) # mar (bottom, left, top, right)
plot(aa[,1], pch = 15, ylim = ylima1, main = expression(alpha[1]), cex.main = 1.5, ylab = "True", xlab = "")
plot(aa[,2], pch = 15, ylim = ylima2, main = expression(alpha[2]), cex.main = 1.5, ylab = "", xlab = "")
plot(bb[,1], pch = 15, ylim = ylimb1, main = expression(beta[1]), cex.main = 1.5, ylab = "", xlab = "")
plot(bb[,2], pch = 15, ylim = ylimb2, main = expression(beta[2]), cex.main = 1.5, ylab = "", xlab = "")
plot(cca_toscca$alpha[,2], pch = 15, ylim = ylima1, ylab = "TOSCCA", xlab = "")
plot(cca_toscca$alpha[,3], pch = 15, ylim = ylima2, ylab = "", xlab = "")
plot(cca_toscca$beta[,2], pch = 15, ylim = ylimb1, ylab = "", xlab = "")
plot(cca_toscca$beta[,3], pch = 15, ylim = ylimb2, ylab = "", xlab = "")
plot(cca_pma$v[,2], pch = 15, ylim = ylima1, ylab = "PMA", xlab = "p")
plot(cca_pma$v[,1], pch = 15, ylim = ylima2, ylab = "", xlab = "p")
plot(cca_pma$u[,2], pch = 15, ylim = ylimb1, ylab = "", xlab = "q")
plot(cca_pma$u[,1], pch = 15, ylim = ylimb2, ylab = "", xlab = "q")
aa= matrix(0, p, K)
aa[loc_alpha1, 1] <- alpha1; aa[loc_alpha2, 2] <- alpha2; aa[loc_alpha3, 3] <- alpha3
bb= matrix(0, q, K)
bb[loc_beta1, 1] <- beta1; bb[loc_beta2, 2] <- beta2; bb[loc_beta3, 3] <- beta3
margin = 0.05
ylima1 = c(min(aa[,1]) - margin, max(aa[,1]) + margin)
ylima2 = c(min(aa[,2]) - margin, max(aa[,2]) + margin)
ylimb1 = c(min(bb[,1]) - margin, max(bb[,1]) + margin)
ylimb2 = c(min(bb[,2]) - margin, max(bb[,2]) + margin)
par(mfrow=c(3,4), mar=c(4., 4.5, 3, 0.5)) # mar (bottom, left, top, right)
plot(aa[,1], pch = 15, ylim = ylima1, main = expression(alpha[1]), cex.main = 1.5, ylab = "True", xlab = "")
plot(aa[,2], pch = 15, ylim = ylima2, main = expression(alpha[2]), cex.main = 1.5, ylab = "", xlab = "")
plot(bb[,1], pch = 15, ylim = ylimb1, main = expression(beta[1]), cex.main = 1.5, ylab = "", xlab = "")
plot(bb[,2], pch = 15, ylim = ylimb2, main = expression(beta[2]), cex.main = 1.5, ylab = "", xlab = "")
plot(cca_toscca$alpha[,2], pch = 15, ylim = ylima1, ylab = "TOSCCA", xlab = "")
plot(cca_toscca$alpha[,1], pch = 15, ylim = ylima2, ylab = "", xlab = "")
plot(cca_toscca$beta[,2], pch = 15, ylim = ylimb1, ylab = "", xlab = "")
plot(cca_toscca$beta[,1], pch = 15, ylim = ylimb2, ylab = "", xlab = "")
plot(cca_pma$v[,2], pch = 15, ylim = ylima1, ylab = "PMA", xlab = "p")
plot(cca_pma$v[,1], pch = 15, ylim = ylima2, ylab = "", xlab = "p")
plot(cca_pma$u[,2], pch = 15, ylim = ylimb1, ylab = "", xlab = "q")
plot(cca_pma$u[,1], pch = 15, ylim = ylimb2, ylab = "", xlab = "q")
par(mfrow=c(2,2))
plot(aa[,1])
lines(cca_toscca$alpha[,3], col = "red")
plot(aa[,2])
lines(cca_toscca$alpha[,1], col = "red")
par(mfrow=c(2,2))
plot(aa[,1])
lines(cca_toscca$alpha[,3], col = "red")
plot(aa[,2])
lines(cca_toscca$alpha[,2], col = "red")
plot(aa[,3])
lines(cca_toscca$alpha[,1], col = "red")
dim(aa)
x=t(aa)%*%cca_toscca$alpha
x
par(mfrow=c(3,4), mar=c(4., 4.5, 3, 0.5)) # mar (bottom, left, top, right)
plot(aa[,1], pch = 15, ylim = ylima1, main = expression(alpha[1]), cex.main = 1.5, ylab = "True", xlab = "")
plot(aa[,2], pch = 15, ylim = ylima2, main = expression(alpha[2]), cex.main = 1.5, ylab = "", xlab = "")
plot(bb[,1], pch = 15, ylim = ylimb1, main = expression(beta[1]), cex.main = 1.5, ylab = "", xlab = "")
plot(bb[,2], pch = 15, ylim = ylimb2, main = expression(beta[2]), cex.main = 1.5, ylab = "", xlab = "")
plot(cca_toscca$alpha[,which(mc[1,]==max(mc))], pch = 15, ylim = ylima1, ylab = "TOSCCA", xlab = "")
mc = t(aa)%*%cca_toscca$alpha
par(mfrow=c(3,4), mar=c(4., 4.5, 3, 0.5)) # mar (bottom, left, top, right)
plot(aa[,1], pch = 15, ylim = ylima1, main = expression(alpha[1]), cex.main = 1.5, ylab = "True", xlab = "")
plot(aa[,2], pch = 15, ylim = ylima2, main = expression(alpha[2]), cex.main = 1.5, ylab = "", xlab = "")
plot(bb[,1], pch = 15, ylim = ylimb1, main = expression(beta[1]), cex.main = 1.5, ylab = "", xlab = "")
plot(bb[,2], pch = 15, ylim = ylimb2, main = expression(beta[2]), cex.main = 1.5, ylab = "", xlab = "")
plot(cca_toscca$alpha[,which(mc[1,]==max(mc))], pch = 15, ylim = ylima1, ylab = "TOSCCA", xlab = "")
which(mc[1,]==max(mc[1,]))
mc_b = t(bb)%*%cca_toscca$beta
mc_a = t(aa)%*%cca_toscca$alpha
mc_b = t(bb)%*%cca_toscca$beta
mc_a = t(aa)%*%cca_toscca$alpha
mc_b = t(bb)%*%cca_toscca$beta
par(mfrow=c(3,4), mar=c(4., 4.5, 3, 0.5)) # mar (bottom, left, top, right)
plot(aa[,1], pch = 15, ylim = ylima1, main = expression(alpha[1]), cex.main = 1.5, ylab = "True", xlab = "")
plot(aa[,2], pch = 15, ylim = ylima2, main = expression(alpha[2]), cex.main = 1.5, ylab = "", xlab = "")
plot(bb[,1], pch = 15, ylim = ylimb1, main = expression(beta[1]), cex.main = 1.5, ylab = "", xlab = "")
plot(bb[,2], pch = 15, ylim = ylimb2, main = expression(beta[2]), cex.main = 1.5, ylab = "", xlab = "")
plot(cca_toscca$alpha[,which(mc_a[1,]==max(mc_a[1,]))], pch = 15, ylim = ylima1, ylab = "TOSCCA", xlab = "")
plot(cca_toscca$alpha[,which(mc_a[2,]==max(mc_b[2,]))], pch = 15, ylim = ylima2, ylab = "", xlab = "")
plot(cca_toscca$alpha[,which(mc_a[2,]==max(mc_b[2,]))], pch = 15, ylim = ylima2, ylab = "", xlab = "")
plot(aa[,1], pch = 15, ylim = ylima1, main = expression(alpha[1]), cex.main = 1.5, ylab = "True", xlab = "")
plot(aa[,2], pch = 15, ylim = ylima2, main = expression(alpha[2]), cex.main = 1.5, ylab = "", xlab = "")
plot(bb[,1], pch = 15, ylim = ylimb1, main = expression(beta[1]), cex.main = 1.5, ylab = "", xlab = "")
plot(bb[,2], pch = 15, ylim = ylimb2, main = expression(beta[2]), cex.main = 1.5, ylab = "", xlab = "")
plot(cca_toscca$alpha[,which(mc_a[1,]==max(mc_a[1,]))], pch = 15, ylim = ylima1, ylab = "TOSCCA", xlab = "")
plot(cca_toscca$alpha[,which(mc_a[2,]==max(mc_a[2,]))], pch = 15, ylim = ylima2, ylab = "", xlab = "")
plot(cca_toscca$beta[,which(mc_b[1,]==max(mc_b[1,]))], pch = 15, ylim = ylimb1, ylab = "", xlab = "")
plot(cca_toscca$beta[,which(mc_b[2,]==max(mc_b[2,]))], pch = 15, ylim = ylimb2, ylab = "", xlab = "")
mc_a = t(aa)%*%cca_toscca$alpha
mc_b = t(bb)%*%cca_toscca$beta
par(mfrow=c(3,4), mar=c(4., 4.5, 3, 0.5)) # mar (bottom, left, top, right)
plot(aa[,1], pch = 15, ylim = ylima1, main = expression(alpha[1]), cex.main = 1.5, ylab = "True", xlab = "")
plot(aa[,2], pch = 15, ylim = ylima2, main = expression(alpha[2]), cex.main = 1.5, ylab = "", xlab = "")
plot(bb[,1], pch = 15, ylim = ylimb1, main = expression(beta[1]), cex.main = 1.5, ylab = "", xlab = "")
plot(bb[,2], pch = 15, ylim = ylimb2, main = expression(beta[2]), cex.main = 1.5, ylab = "", xlab = "")
plot(cca_toscca$alpha[,which(mc_a[1,]==max(mc_a[1,]))], pch = 15, ylim = ylima1, ylab = "TOSCCA", xlab = "")
plot(cca_toscca$alpha[,which(mc_a[2,]==max(mc_a[2,]))], pch = 15, ylim = ylima2, ylab = "", xlab = "")
plot(cca_toscca$beta[,which(mc_b[1,]==max(mc_b[1,]))], pch = 15, ylim = ylimb1, ylab = "", xlab = "")
plot(cca_toscca$beta[,which(mc_b[2,]==max(mc_b[2,]))], pch = 15, ylim = ylimb2, ylab = "", xlab = "")
aa= matrix(0, p, K)
aa[loc_alpha1, 1] <- alpha1; aa[loc_alpha2, 2] <- alpha2; aa[loc_alpha3, 3] <- alpha3
bb= matrix(0, q, K)
bb[loc_beta1, 1] <- beta1; bb[loc_beta2, 2] <- beta2; bb[loc_beta3, 3] <- beta3
margin = 0.05
ylima1 = c(min(aa[,1]) - margin, max(aa[,1]) + margin)
ylima2 = c(min(aa[,2]) - margin, max(aa[,2]) + margin)
ylimb1 = c(min(bb[,1]) - margin, max(bb[,1]) + margin)
ylimb2 = c(min(bb[,2]) - margin, max(bb[,2]) + margin)
mc_a = t(aa)%*%cca_toscca$alpha
mc_b = t(bb)%*%cca_toscca$beta
mp_a = t(aa)%8%cca_pma$u
aa= matrix(0, p, K)
aa[loc_alpha1, 1] <- alpha1; aa[loc_alpha2, 2] <- alpha2; aa[loc_alpha3, 3] <- alpha3
bb= matrix(0, q, K)
bb[loc_beta1, 1] <- beta1; bb[loc_beta2, 2] <- beta2; bb[loc_beta3, 3] <- beta3
margin = 0.05
ylima1 = c(min(aa[,1]) - margin, max(aa[,1]) + margin)
ylima2 = c(min(aa[,2]) - margin, max(aa[,2]) + margin)
ylimb1 = c(min(bb[,1]) - margin, max(bb[,1]) + margin)
ylimb2 = c(min(bb[,2]) - margin, max(bb[,2]) + margin)
mc_a = t(aa)%*%cca_toscca$alpha
mc_b = t(bb)%*%cca_toscca$beta
mp_a = t(aa)%*%cca_pma$u
mp_b = t(bb)%*%cca_pma$v
par(mfrow=c(3,4), mar=c(4., 4.5, 3, 0.5)) # mar (bottom, left, top, right)
plot(aa[,1], pch = 15, ylim = ylima1, main = expression(alpha[1]), cex.main = 1.5, ylab = "True", xlab = "")
plot(aa[,2], pch = 15, ylim = ylima2, main = expression(alpha[2]), cex.main = 1.5, ylab = "", xlab = "")
plot(bb[,1], pch = 15, ylim = ylimb1, main = expression(beta[1]), cex.main = 1.5, ylab = "", xlab = "")
plot(bb[,2], pch = 15, ylim = ylimb2, main = expression(beta[2]), cex.main = 1.5, ylab = "", xlab = "")
plot(cca_toscca$alpha[,which(mc_a[1,]==max(mc_a[1,]))], pch = 15, ylim = ylima1, ylab = "TOSCCA", xlab = "")
plot(cca_toscca$alpha[,which(mc_a[2,]==max(mc_a[2,]))], pch = 15, ylim = ylima2, ylab = "", xlab = "")
plot(cca_toscca$beta[,which(mc_b[1,]==max(mc_b[1,]))], pch = 15, ylim = ylimb1, ylab = "", xlab = "")
plot(cca_toscca$beta[,which(mc_b[2,]==max(mc_b[2,]))], pch = 15, ylim = ylimb2, ylab = "", xlab = "")
plot(cca_pma$v[,which(mp_a[1,]==max(mp_a[1,]))], pch = 15, ylim = ylima1, ylab = "PMA", xlab = "p")
plot(cca_pma$v[,which(mp_a[2,]==max(mp_a[2,]))], pch = 15, ylim = ylima2, ylab = "", xlab = "p")
plot(cca_pma$u[,which(mp_b[1,]==max(mp_b[1,]))], pch = 15, ylim = ylimb1, ylab = "", xlab = "q")
plot(cca_pma$u[,which(mp_b[2,]==max(mp_b[2,]))], pch = 15, ylim = ylimb2, ylab = "", xlab = "q")
which(mp_b[2,]==max(mp_b[2,]))]
aa= matrix(0, p, K)
aa[loc_alpha1, 1] <- alpha1; aa[loc_alpha2, 2] <- alpha2; aa[loc_alpha3, 3] <- alpha3
bb= matrix(0, q, K)
bb[loc_beta1, 1] <- beta1; bb[loc_beta2, 2] <- beta2; bb[loc_beta3, 3] <- beta3
margin = 0.05
ylima1 = c(min(aa[,1]) - margin, max(aa[,1]) + margin)
ylima2 = c(min(aa[,2]) - margin, max(aa[,2]) + margin)
ylimb1 = c(min(bb[,1]) - margin, max(bb[,1]) + margin)
ylimb2 = c(min(bb[,2]) - margin, max(bb[,2]) + margin)
mc_a = t(aa)%*%cca_toscca$alpha
mc_b = t(bb)%*%cca_toscca$beta
mp_a = t(aa)%*%cca_pma$u
mp_b = t(bb)%*%cca_pma$v
par(mfrow=c(3,4), mar=c(4., 4.5, 3, 0.5)) # mar (bottom, left, top, right)
plot(aa[,1], pch = 15, ylim = ylima1, main = expression(alpha[1]), cex.main = 1.5, ylab = "True", xlab = "")
plot(aa[,2], pch = 15, ylim = ylima2, main = expression(alpha[2]), cex.main = 1.5, ylab = "", xlab = "")
plot(bb[,1], pch = 15, ylim = ylimb1, main = expression(beta[1]), cex.main = 1.5, ylab = "", xlab = "")
plot(bb[,2], pch = 15, ylim = ylimb2, main = expression(beta[2]), cex.main = 1.5, ylab = "", xlab = "")
plot(cca_toscca$alpha[,which(mc_a[1,]==max(mc_a[1,]))], pch = 15, ylim = ylima1, ylab = "TOSCCA", xlab = "")
plot(cca_toscca$alpha[,which(mc_a[2,]==max(mc_a[2,]))], pch = 15, ylim = ylima2, ylab = "", xlab = "")
plot(cca_toscca$beta[,which(mc_b[1,]==max(mc_b[1,]))], pch = 15, ylim = ylimb1, ylab = "", xlab = "")
plot(cca_toscca$beta[,which(mc_b[2,]==max(mc_b[2,]))], pch = 15, ylim = ylimb2, ylab = "", xlab = "")
plot(cca_pma$v[,which(mp_a[1,]==max(mp_a[1,]))], pch = 15, ylim = ylima1, ylab = "PMA", xlab = "p")
plot(cca_pma$v[,which(mp_a[2,]==max(mp_a[2,]))], pch = 15, ylim = ylima2, ylab = "", xlab = "p")
plot(cca_pma$u[,which(mp_b[1,]==max(mp_b[1,]))], pch = 15, ylim = ylimb1, ylab = "", xlab = "q")
plot(cca_pma$u[,which(mp_b[2,]==max(mp_b[2,]))], pch = 15, ylim = ylimb2, ylab = "", xlab = "q")
mp_a
which(mp_a[1,]==max(mp_a[1,]))
aa= matrix(0, p, K)
aa[loc_alpha1, 1] <- alpha1; aa[loc_alpha2, 2] <- alpha2; aa[loc_alpha3, 3] <- alpha3
bb= matrix(0, q, K)
bb[loc_beta1, 1] <- beta1; bb[loc_beta2, 2] <- beta2; bb[loc_beta3, 3] <- beta3
margin = 0.05
ylima1 = c(min(aa[,1]) - margin, max(aa[,1]) + margin)
ylima2 = c(min(aa[,2]) - margin, max(aa[,2]) + margin)
ylimb1 = c(min(bb[,1]) - margin, max(bb[,1]) + margin)
ylimb2 = c(min(bb[,2]) - margin, max(bb[,2]) + margin)
mc_a = t(aa)%*%cca_toscca$alpha
mc_b = t(bb)%*%cca_toscca$beta
mp_a = t(aa)%*%cca_pma$u
mp_b = t(bb)%*%cca_pma$v
par(mfrow=c(3,4), mar=c(4., 4.5, 3, 0.5)) # mar (bottom, left, top, right)
plot(aa[,1], pch = 15, ylim = ylima1, main = expression(alpha[1]), cex.main = 1.5, ylab = "True", xlab = "")
plot(aa[,2], pch = 15, ylim = ylima2, main = expression(alpha[2]), cex.main = 1.5, ylab = "", xlab = "")
plot(bb[,1], pch = 15, ylim = ylimb1, main = expression(beta[1]), cex.main = 1.5, ylab = "", xlab = "")
plot(bb[,2], pch = 15, ylim = ylimb2, main = expression(beta[2]), cex.main = 1.5, ylab = "", xlab = "")
plot(cca_toscca$alpha[,which(mc_a[1,]==max(mc_a[1,]))], pch = 15, ylim = ylima1, ylab = "TOSCCA", xlab = "")
plot(cca_toscca$alpha[,which(mc_a[2,]==max(mc_a[2,]))], pch = 15, ylim = ylima2, ylab = "", xlab = "")
plot(cca_toscca$beta[,which(mc_b[1,]==max(mc_b[1,]))], pch = 15, ylim = ylimb1, ylab = "", xlab = "")
plot(cca_toscca$beta[,which(mc_b[2,]==max(mc_b[2,]))], pch = 15, ylim = ylimb2, ylab = "", xlab = "")
plot(cca_pma$v[,which(mp_a[1,]==max(mp_a[1,]))[1]], pch = 15, ylim = ylima1, ylab = "PMA", xlab = "p")
plot(cca_pma$v[,which(mp_a[2,]==max(mp_a[2,]))[1]], pch = 15, ylim = ylima2, ylab = "", xlab = "p")
plot(cca_pma$u[,which(mp_b[1,]==max(mp_b[1,]))[1]], pch = 15, ylim = ylimb1, ylab = "", xlab = "q")
plot(cca_pma$u[,which(mp_b[2,]==max(mp_b[2,]))[1]], pch = 15, ylim = ylimb2, ylab = "", xlab = "q")
use_readme_md(open = rlang::is_interactive())
library(devtools)
use_readme_md(open = rlang::is_interactive())
devtools::build_readme()
devtools::build_readme()

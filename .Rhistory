getwd()
library(devtools)
install_github("nuria-sv/toscca")
install_github("nuria-sv/toscca")
devtools::document()
devtools::build_vignettes()
devtools::build_vignettes("Introduction")
devtools::build_vignettes("main")
devtools::build_vignettes("main.R")
devtools::build_vignettes("R/main.R")
package_file()
devtools::build_vignettes("R")
install_github("nuria-sv/toscca")
devtools::document()
install_github("nuria-sv/toscca")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library("qgraph")
data(big5)
data(big5groups)
qgraph(cor(big5),minimum=0.25,cut=0.4,vsize=2,groups=big5groups,legend=TRUE,borders=FALSE)
title("Big 5 correlations",line=-2,cex.main=2)
install.packages("qgraph")
library("qgraph")
data(big5)
data(big5groups)
qgraph(cor(big5),minimum=0.25,cut=0.4,vsize=2,groups=big5groups,legend=TRUE,borders=FALSE)
title("Big 5 correlations",line=-2,cex.main=2)
summary(big5)
devtools::document()
devtools::document()
devtools::document()
load("C:/Users/nuria/Desktop/PicaPiedra/UMC/data/marfan/marfan.Rdata")
fenotypenames
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::build_manual()
devtools::build_manual()
devtools::document()
devtools::document()
devtools::build_manual()
folds = 1
arallel_logic = FALSE
silent = FAL
silent = FALSE
ATest_res = NULL
BTest_res = NULL
N = nrow(A) # observations
p = ncol(A) # predictor variables (not really since CCA is symmetric)
q = ncol(B) # response variables (not really since CCA is symmetric)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::build_manual()
devtools::build_readme()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::build_readme()
devtools::build_manual()
devtools::document()
print(paste0("Empirical p-values: /n", pValues))
print(paste0("Empirical p-values: /n", 2))
print(paste0("Empirical p-values: \n", 2))
print(paste0("Empirical p-values:\n", 2))
print(paste0("Empirical p-values:/n", 2))
print(paste("Empirical p-values:\n", 2))
print(paste0("Empirical p-values: ", 2, sep = "\n"))
print(paste("Empirical p-values: ", 2, sep = "\n"))
print(cat("Empirical p-values:", 2))
print(cat("Empirical p-values:", c(2, 1, 2)))
print(cat("Empirical p-values:", c(2, 1, 2), sep = "\n"))
devtools::document()
devtools::build_readme()
library(devtools)
install_github("thomasklausch2/BayesTSM")
install_github("thomasklausch2/BayesTSM")
x = rnorm(100)
x[40:80] = cumsum(cumsum(x[40:80]**2)**2)
plot(x)
x = rnorm(100)
x[40:80] = cumsum(cumsum(x[40:80]**2)**2)
x = rnorm(100)
x[40:80] = cumsum(cumsum(x[40:80]**2)**2)
x = rnorm(100)
x[40:80] = cumsum(cumsum(x[40:80]**2)**2)
plot(x)
bubble <- read.csv("C:/Users/nuria/Desktop/gnuplot/bubble.csv")
View(bubble)
x = bubble$x/max(bubble$x)
plot(x)
getwd()
write.csv("C:/Users/nuria/Documents/Desktop/gnuplot/bubble_normal")
write.csv("C:/Users/nuria/Documents/Desktop/gnuplot/bubble_scaled.csv")
write.csv(x, file = "C:/Users/nuria/Documents/Desktop/gnuplot/bubble_scaled.csv")
write.csv(x, "C:/Users/nuria/Documents/Desktop/gnuplot/bubble_scaled.csv")
write.csv(x, file = "C:/Users/nuria/Documents/Desktop/gnuplot/bubble_scaled.csv")
write.csv(x, file = "C:/Users/nuria/Desktop/gnuplot/bubble_scaled.csv")
getwd()
setwd("C:/Users/nuria/Desktop/PicaPiedra/UMC/data/kidneyTrans")
library("memisc")
df <- data.frame(as.data.set(spss.system.file("pat_tijd data.sav")))
df$date = as.Date(as.numeric(df$t), origin = "000")
df$date = as.Date(as.numeric(df$t), origin = "0000")
df$date = as.Date(as.numeric(df$t), origin = "0000-01-01")
plot(df$date[df$patnr=="6278"], df$recip[df$patnr=="6278"])
library(streamgraph)
streamgraph(df, key = "patnr", value = "recip", date = "date")
class(df$recip)
df$value = as.numeric(df$recip)
streamgraph(df, key = "patnr", value = "value", date = "date")
pp <- streamgraph(df, key = "patnr", value = "value", date = "date") + sg_legend(show = TRUE, label = "names: ")
pp <- streamgraph(df, key = "patnr", value = "value", date = "date")
pp
df$id = as.character(df$patnr)
pp <- streamgraph(df, key = "patnr", value = "value", date = "date")
pp
class(df$date)
pp <- streamgraph(df, key = "patnr", value = "value", date = "date", height = "300px", width = "1000px") + sg_legend(show = TRUE, label = "names: ")
pp <- streamgraph(df, key = "patnr", value = "value", date = "date", height = "300px", width = "1000px")
pp
streamgraph(df, key = "patnr", value = "value", date = "date", height = "300px", width = "1000px")
df1 = df[, c("date", "value", "id")]
streamgraph(df1, key = "patnr", value = "value", date = "date", height = "300px", width = "1000px")
df1
class(df1)
streamgraph(df1, key = "id", value = "value", date = "date", height = "300px", width = "1000px")
library(shiny)
streamgraph(df1, key = "id", value = "value", date = "date", height = "300px", width = "1000px")
